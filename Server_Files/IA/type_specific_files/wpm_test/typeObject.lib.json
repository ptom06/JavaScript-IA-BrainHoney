{"wpm_test": {
	"scripts": [
		"timer.js",
		"checker.js",
		"copyPaste.js"
	],
	#INPUT#"inputElementsString": "<form>Time remaining:<input id=\"txt\" readonly type=\"text\" value=\"\" border=\"0\" name=\"disp\">\n" +
		"	<br />\n" +
		"	<div id=\"inputText\" style=\"position:static;  width:823px;  height:166px;\">" +
		"	<textarea id=\"area1\"  onkeydown=\"return disableCtrlKeyCombination(event);\" onKeyUp=\"return disableCtrlKeyCombination(event);\"  style=\"font-family:Arial, Helvetica, sans-serif;\" readonly rows=\"10\" cols=\"133\"></textarea>"	+
		"	 	<div id=\"textCorrection\" style=\"position:relative ;  z-index:999;  top:-168px;left:0px;  width:inherit;  height:inherit;  background:white;  overflow:auto;  border:thin;  border-style:solid;  border-color:#B4B4B4;\">Type the text that appears here in the box below. Click Start to begin.	" +
		"		</div>" +
		"	 </div>" +
		"	<br /> " + 
		"	<input type=\"button\" id=\"vStart\" value=\"Start Test\" />" +
		"	<input type=\"button\" id=\"done\" value=\"Done\" />" +
		"	 <br /> " + 
		"	<textarea id=\"userText\" onKeyDown=\"return disableCtrlKeyCombination(event); \" onKeyUp=\"diffString1(document.getElementById('area1').value,this.value);\" rows=\"10\" cols=\"100\" name=\"user_text\" ></textarea>" + 
		"	<br />  " +
		"	<div id=\"scoreTable\" >" +				 
		" 	</div></form>",#INPUT#
	#CONFIG#"configurationElementString":"<h2 style=\"color:teal\">Typing Assessment Configurator</h2>" +
		"<select id=\"pracFin\" >" +
		"	<option value=\"practice\">Practice</option>" +
		"	<option value=\"test\">Test</option>" +
		"</select>" +
		"<div id=\"practiceDiv\">" +
		"	<div class=\"align-left\">" +
		"		Time limit (seconds):" +
		"	</div>" +
		"	<div>" +
		"		<input id=\"timeLimit\" type=\"text\"  placeholder=\"time limit (seconds)...\" 	/>" +
		"	</div>" +
		"	<div class=\"align-left\">" +
		"		Expected words per minute:" +
		"	</div>" +
		"	<div>" +
		"		<input id=\"expectedWPM\" type=\"text\" placeholder=\"Insert expected WPM\"/>" +
		"	</div>" +
		"	<div>" +
		"		How to account for errors:" +
		"	</div>" +
		"	<div id=\"spaceFill\" style=\"height:1.5em\">" +
		"		<div id=\"gradingOptions\" contenteditable=\"false\">" +
		"			Subtract <input type=\"text\" style=\"max-width:20px\" id=\"errorValue\" />" +
		"			<select id=\"errorValueType\">" +
		"				<option value=\"points\">point(s)</option>" +
		"				<option value=\"percent\">percent</option>" +
		"			</select>" +
		"			per error" +
		"		</div>" +
		"	</div>" +
		"	Number of Possible Texts:" +
		"	<select id=\"numTexts\" >" +
		"		<option value=\"1\">1</option>" +
		"		<option value=\"2\">2</option>" +
		"		<option value=\"3\">3</option>" +
		"		<option value=\"4\">4</option>" +
		"		<option value=\"5\">5</option>" +
		"		<option value=\"6\">6</option>" +
		"		<option value=\"7\">7</option>" +
		"		<option value=\"8\">8</option>" +
		"		<option value=\"9\">9</option>" +
		"		<option value=\"10\">10</option>" +
		"	</select>" +
		"	<br/>" +
		"	<div id=\"tooShort\">" +
		"	</div>" +
		"	<div id=\"textfields\" >" +
		"	</div>" +
		"	<br/>" +
		"	<input id=\"assessmentSubmit\" type=\"button\" value=\"Finished\" />" +
		"</div>" +
		"<div id=\"result\"></div>" +
		"<div id=\"jsonR\"></div>",#CONFIG#
	"methods": 
	[
		
		#INPUT#{
			"name": "startClick",
			"type": "click",
			"id": "vStart",
			"handler":"function(){
				var startCount = 0;
				startCount++;
				if (startCount == 1){
					$.post(
						portalURL,
						{
							\"ia_type\":		\"wpm_test\",
							\"action\": 		\"start\",
						},
						/*For when the files save properly*/
						function(data){
							if(typeof data === \"string\")
								text_area = JSON.parse(data);
							else
								text_area = data;
							document.getElementById(\"area1\").innerHTML = text_area.welcome.les_text;
							document.getElementById(\"textCorrection\").innerHTML = text_area.welcome.les_text;
							var seconds = text_area.time; 
							//IsLog.c(seconds);
							InitTimer(seconds);
						},
						\"json\"
					);
				}
				var message=\"Sorry, right-click has been disabled\"; 
				function clickIE() {if (document.all) {(message);return false;}} 
				function clickNS(e) {if 
				(document.layers||(document.getElementById&&!document.all)) { 
				if (e.which==2||e.which==3) {(message);return false;}}} 
				if (document.layers) 
					{document.captureEvents(Event.MOUSEDOWN);document.onmousedown=clickNS;} 
				else{document.onmouseup=clickNS;document.oncontextmenu=clickIE;} 
				document.oncontextmenu=new Function(\"return false\");
				function submitScores() {
					if(initialized == true && doneClicked == true) {
						setScore(cpm);
						window.clearInterval(intervalVar);
					}
				}
			}"
		},
		{
			"name":	"rightClick",
			"id":"area1",
			"type": "click change keypress keydown update contextmenu",
			"handler": "function(e) {
				if(e == null) {
					e = arguments[0];
				}
				IsLog.c(\"Disabled event type \"+e.type);
				return false;
			}"
		},
		{
			"name":	"rightClick",
			"id":"userText",
			"type": "click change keypress keydown update contextmenu",
			"handler": "function(e) {
				if(e == null) {
					e = arguments[0];
				}
				//IsLog.c(e);
				if(e.type == \"contextmenu\")
					return false;
				if(e.type.indexOf(\"mouse\") > -1) {
					this.focus();
					return false;
				}
				if(e.ctrlKey == true) {
					return false;
				}
			}"
		},
		{
			"name": "doneClick",
			"type": "click",
			"id": "done",
			"handler":"function(){
				doneCount++;
				userInput = $('textarea#userText').val();
				var Jstring = JSON.stringify(userInput);
				if (doneCount == 1){
					$.post(
						portalURL,
						{
							\"ia_type\":		\"wpm_test\",
							\"action\":		\"done\",
							\"ui\":			userInput
						},
						function(data){
							table = JSON.parse(data);
							document.getElementById(\"scoreTable\").innerHTML = table.scores;
							StopTimer();
						}
					);
				}
				setScore(table.grade);
			}"
		}#INPUT#
		#CONFIG#{
			"name": "startup",
			"fireAutomatically": true,
			"type": "change",
			"id": "numTexts",
			"handler": "function(){
				var textStrings= new Array();
	
				$(\".align-left\").css(\"float\",\"left\");			/*	formats the text so it ligns up	*/
				$(\".align-left\").css(\"min-width\",\"200px\");
				
				if(window['textStrings'] == undefined)
					window['textStrings'] = [];				
			}"
		},{
			"name": "finished",
			"type": "click",
			"id": "assessmentSubmit",
			"handler": "function() {
				var validTimeLimit = true;
				var maxLoops = 10;
				var loopCount = 0;
				while(maxLoops > loopCount && $(\".error-text\").length > 0) {
					$(\".error-text\").remove();
				}
				if(typeof window['textStrings'] != \"object\") {
					IsLog.c(\"textStrings reset: \"+(typeof window['textStrings']));
					IsLog.c(window['textStrings']);
					window['textStrings'] = [];
				} else {
					IsLog.c(\"textStrings found, not reset: \"+window['textStrings']);
				}
				var time = $(\"#timeLimit\").val();
				var invalidIndex = -1;
				for(i = 0; i < $('#numTexts').val(); i++){
					IsLog.c(window['textStrings']);
					if(window['textStrings'].length > i) {
						strLen=(window['textStrings'][i].length) / 5;
						if (strLen < (time * 2)){
							validTimeLimit = false;
							invalidIndex = i;
							break;
						}
					} else {
						validTimeLimit = false;
						invalidIndex = 0;
					}
				}

				if(validTimeLimit == true) {
					var error = false;
					var errorMessage = \"These fields cannot be blank: \";
					var JSONString = \"\";
					
					var formInputs = $(\"input,textarea,select\");
					
					var requiredFields = {
						\"timeLimit\":\"You need a time limit.\",
						\"expectedWPM\":\"You need an expected words per min.\",
						\"errorValue\":\"You need to penalize errors (you could put zero).\",
						\"errorValue\":\"You need to penalize errors (you could put zero).\",
					};
					
					var formObject = {};					
					for(var i=0; i < formInputs.length; i++) {
						if(([\"assessmentSubmit\",\"numTexts\"]).indexOf($(formInputs[i]).attr(\"id\")) == -1) {
							var objectKey = (($(formInputs[i]).attr(\"id\"))?$(formInputs[i]).attr(\"id\"):$(formInputs[i]).attr(\"name\"));
							if(formObject[objectKey] == null)
								formObject[objectKey] = ($(formInputs[i]).val());
							else if($(formInputs[i]).val() != \"\") {
								if(typeof formObject[objectKey] == \"string\")
									formObject[objectKey] = [formObject[objectKey]];
								formObject[objectKey].push($(formInputs[i]).val());
							}
						}
					}
					JSONString = JSON.stringify(formObject);
					$.post(
						portalURL,
						{
							\"ia_type\":\"wpm_test\",
							\"type\":\"final\",
							\"JSONString\":JSONString,
							\"domain\": bhDomain,
							\"courseTitle\": (window.parent.bhCourseTitle)?window.parent.bhCourseTitle:\"UNTITLED\",
							\"courseID\": (window.parent.bhCourseId)?window.parent.bhCourseId:\"NOCOURSEID\",
							\"itemID\": (window.parent.bhItemId)?window.parent.bhItemId:\"NOTIEMID\",
							\"itemTitle\": (window.parent.bhItemTitle)?window.parent.bhItemTitle:\"NOTITLE\",
							\"action\":\"create\"
						},
						function(data) {
							IsLog.c(JSONString);
							$(\"body\").append($(\"<h2>Assesment created successsfully</h2>\"));
						}
					);
				} else {
					var shortText = $(\"<h2 class=\\\"error-text\\\" style=\\\"color:red\\\" >A text field is not long enough or the time limit is so long that students could finish before time expires.</h2>\");
					try {
						IsLog.c($(\"textarea\"));
						IsLog.c(invalidIndex);
						shortText.insertBefore($(\"textarea\")[invalidIndex]);
					} catch (err) {
						alert('error:'+err.message);
					}
				}
			}"
		},{
			"name": "addInput",
			"type": "change",
			"id": "numTexts",
			"fireAutomatically": true,
			"handler": "function() {
				var targetElement = (($('#textfields').length > 0)?$($('#textfields')[0]):null);
				if(!targetElement)
					return -1;
				var loopCount = 0;
				var maxLoops = 10;
				var textArea = $(\"textarea\")[$(\"textarea\").length-1];
				while(loopCount <= maxLoops && textArea) {
					if($(textArea).val())
						window['textStrings'][$(\"textarea\").length-1] = $(textArea).val();
					textArea.parentElement.removeChild(textArea);
					loopCount++;
					textArea = $(\"textarea\")[$(\"textarea\").length-1];
				}
				
				targetElement.empty();
				
				for(i = 0; i < $('#numTexts').val(); i++) {
					var textArea = $(\"<textarea rows=\\\"8\\\" cols=\\\"64\\\" placeholder=\\\"the instructor will input the material for which the student will be assesed in this box\\\"></textarea>\");
					textArea.attr(\"name\", \"text\");
					var additionalFormatting = $(\"<br/>\");
					if(textStrings[i])
						textArea.val(window['textStrings'][i]);
					targetElement.append(textArea);
					targetElement.append(additionalFormatting);
					/*	initAssessmentObjects();	*/
				}
				if(this instanceof HTMLElement) {
					for(var i=0; i < assessmentElements.length; i++) {
						if(typeof assessmentElements[i].setEvents == \"function\") {
							assessmentElements[i].setEvents();
						}
					}
				}
			}"
		},{
			"name": "updateTextStrings",
			"type": "keyup",
			"tag": "textarea",
			"handler": "function() {
				if(typeof window['textStrings'] != \"object\")
					window['textStrings'] = [];
				var targetElement = this;
				var allTextareas = $(\"textarea\");
				var targetElementIndex = -1;
				for(var i=allTextareas.length-1; i >= 0; i--) {
					if(targetElement == allTextareas[i]) {
						targetElementIndex = i;
						IsLog.c(\"Found textarea target\");
						break;
					}
				}
				if(targetElementIndex > -1) {
					IsLog.c(\"textStrings index:\"+targetElementIndex);
					window['textStrings'][targetElementIndex] = this.value;
				} else {
					IsLog.c(\"textStrings is not found.\");
				}
				IsLog.c(window['textStrings']);
			}"
		}#CONFIG#	
	]
}}